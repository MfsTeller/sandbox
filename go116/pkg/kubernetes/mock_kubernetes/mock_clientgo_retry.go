// Code generated by MockGen. DO NOT EDIT.
// Source: clientgo_retry.go

// Package mock_kubernetes is a generated GoMock package.
package mock_kubernetes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	wait "k8s.io/apimachinery/pkg/util/wait"
)

// MockclientGoRetry is a mock of clientGoRetry interface.
type MockclientGoRetry struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoRetryMockRecorder
}

// MockclientGoRetryMockRecorder is the mock recorder for MockclientGoRetry.
type MockclientGoRetryMockRecorder struct {
	mock *MockclientGoRetry
}

// NewMockclientGoRetry creates a new mock instance.
func NewMockclientGoRetry(ctrl *gomock.Controller) *MockclientGoRetry {
	mock := &MockclientGoRetry{ctrl: ctrl}
	mock.recorder = &MockclientGoRetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoRetry) EXPECT() *MockclientGoRetryMockRecorder {
	return m.recorder
}

// RetryOnConflict mocks base method.
func (m *MockclientGoRetry) RetryOnConflict(backoff wait.Backoff, fn func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryOnConflict", backoff, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryOnConflict indicates an expected call of RetryOnConflict.
func (mr *MockclientGoRetryMockRecorder) RetryOnConflict(backoff, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryOnConflict", reflect.TypeOf((*MockclientGoRetry)(nil).RetryOnConflict), backoff, fn)
}
