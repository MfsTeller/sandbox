// Code generated by MockGen. DO NOT EDIT.
// Source: signal.go

// Package daemon is a generated GoMock package.
package mock_daemon

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSignal is a mock of Signal interface.
type MockSignal struct {
	ctrl     *gomock.Controller
	recorder *MockSignalMockRecorder
}

// MockSignalMockRecorder is the mock recorder for MockSignal.
type MockSignalMockRecorder struct {
	mock *MockSignal
}

// NewMockSignal creates a new mock instance.
func NewMockSignal(ctrl *gomock.Controller) *MockSignal {
	mock := &MockSignal{ctrl: ctrl}
	mock.recorder = &MockSignalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignal) EXPECT() *MockSignalMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockSignal) Notify(c chan<- os.Signal, sig ...os.Signal) {
	m.ctrl.T.Helper()
	varargs := []interface{}{c}
	for _, a := range sig {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Notify", varargs...)
}

// Notify indicates an expected call of Notify.
func (mr *MockSignalMockRecorder) Notify(c interface{}, sig ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{c}, sig...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockSignal)(nil).Notify), varargs...)
}

// MockDaemon is a mock of Daemon interface.
type MockDaemon struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonMockRecorder
}

// MockDaemonMockRecorder is the mock recorder for MockDaemon.
type MockDaemonMockRecorder struct {
	mock *MockDaemon
}

// NewMockDaemon creates a new mock instance.
func NewMockDaemon(ctrl *gomock.Controller) *MockDaemon {
	mock := &MockDaemon{ctrl: ctrl}
	mock.recorder = &MockDaemonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaemon) EXPECT() *MockDaemonMockRecorder {
	return m.recorder
}

// WaitForInputSignal mocks base method.
func (m *MockDaemon) WaitForInputSignal() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForInputSignal")
}

// WaitForInputSignal indicates an expected call of WaitForInputSignal.
func (mr *MockDaemonMockRecorder) WaitForInputSignal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForInputSignal", reflect.TypeOf((*MockDaemon)(nil).WaitForInputSignal))
}
