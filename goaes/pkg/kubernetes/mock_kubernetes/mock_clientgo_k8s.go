// Code generated by MockGen. DO NOT EDIT.
// Source: clientgo_k8s.go

// Package mock_kubernetes is a generated GoMock package.
package mock_kubernetes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
)

// MockclientGoKubernetes is a mock of clientGoKubernetes interface.
type MockclientGoKubernetes struct {
	ctrl     *gomock.Controller
	recorder *MockclientGoKubernetesMockRecorder
}

// MockclientGoKubernetesMockRecorder is the mock recorder for MockclientGoKubernetes.
type MockclientGoKubernetesMockRecorder struct {
	mock *MockclientGoKubernetes
}

// NewMockclientGoKubernetes creates a new mock instance.
func NewMockclientGoKubernetes(ctrl *gomock.Controller) *MockclientGoKubernetes {
	mock := &MockclientGoKubernetes{ctrl: ctrl}
	mock.recorder = &MockclientGoKubernetesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientGoKubernetes) EXPECT() *MockclientGoKubernetesMockRecorder {
	return m.recorder
}

// NewForConfig mocks base method.
func (m *MockclientGoKubernetes) NewForConfig(c *rest.Config) (*kubernetes.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewForConfig", c)
	ret0, _ := ret[0].(*kubernetes.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewForConfig indicates an expected call of NewForConfig.
func (mr *MockclientGoKubernetesMockRecorder) NewForConfig(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewForConfig", reflect.TypeOf((*MockclientGoKubernetes)(nil).NewForConfig), c)
}
