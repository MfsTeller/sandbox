// Code generated by MockGen. DO NOT EDIT.
// Source: enver.go

// Package mock_enver is a generated GoMock package.
package mock_enver

import (
	enver "gosample/hoge/enver"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnver is a mock of Enver interface.
type MockEnver struct {
	ctrl     *gomock.Controller
	recorder *MockEnverMockRecorder
}

// MockEnverMockRecorder is the mock recorder for MockEnver.
type MockEnverMockRecorder struct {
	mock *MockEnver
}

// NewMockEnver creates a new mock instance.
func NewMockEnver(ctrl *gomock.Controller) *MockEnver {
	mock := &MockEnver{ctrl: ctrl}
	mock.recorder = &MockEnverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnver) EXPECT() *MockEnverMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockEnver) Initialize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize")
}

// Initialize indicates an expected call of Initialize.
func (mr *MockEnverMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockEnver)(nil).Initialize))
}

// GetEnv mocks base method.
func (m *MockEnver) GetEnv() enver.ModelEnv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnv")
	ret0, _ := ret[0].(enver.ModelEnv)
	return ret0
}

// GetEnv indicates an expected call of GetEnv.
func (mr *MockEnverMockRecorder) GetEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnv", reflect.TypeOf((*MockEnver)(nil).GetEnv))
}
